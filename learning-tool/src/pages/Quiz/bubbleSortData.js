export const easyData = [
    {
        question: "How does the Bubble Sort algorithm work?",
        option1: "By applying a mathematical formula to rearrange elements",
        option2: "By using a pivot element to divide the array into subarrays",
        option3: "By repeatedly swapping adjacent elements if they are in the wrong order",
        option4: "By performing a binary search to locate the correct position of elements",
        ans: 3,
    },
    {
        question: "What is the time complexity of Bubble Sort in the best-case scenario?",
        option1: "O(n^2)",
        option2: "O(n)",
        option3: "O(n log n)",
        option4: "O(1)",
        ans: 2,
    },
    {
        question: "What is the primary operation performed in each pass of Bubble Sort?",
        option1: "Finding the median",
        option2: "Dividing the array into two halves",
        option3: "Calculating the average of elements",
        option4: "Swapping adjacent elements",
        ans: 4,
    },
    {
        question: "In the best-case scenario, when is Bubble Sort most efficient?",
        option1: "When the array contains a small number of elements",
        option2: "When the array is sorted in reverse order",
        option3: "When the array is already sorted",
        option4: "When the array has a uniform distribution of values",
        ans: 3,
    },
    {
        question: "Explain the concept of a 'pass' in the Bubble Sort algorithm.",
        option1: "It represents the size of the subarray being sorted.",
        option2: "It is the process of selecting the pivot element for sorting.",
        option3: "It indicates the number of elements to be skipped during the sorting process.",
        option4: "It refers to a complete iteration through the array, comparing and swapping elements.",
        ans: 4,
    },
];

// export const mediumData = [
//     {
//         question: "How would you optimize Bubble Sort to improve its performance?",
//         option1: "Introduce parallel processing for faster execution",
//         option2: "Increase the number of passes through the array",
//         option3: "Apply dynamic programming techniques",
//         option4: "Implement a mechanism to stop the algorithm if no swaps are performed in a pass",
//         ans: 4,
//     },
//     {
//         question: "Discuss the advantages and disadvantages of using Bubble Sort compared to other sorting algorithms.",
//         option1: "Advantages: Bubble Sort is simple; Disadvantages: inefficiency for large lists",
//         option2: "Advantages: fast execution; Disadvantages: complexity in code structure",
//         option3: "Advantages: suitable for any list size; Disadvantages: limited applicability",
//         option4: "Advantages: minimal memory usage; Disadvantages: high time complexity",
//         ans: 1,
//     },
//     {
//         question: "When might you choose to use Bubble Sort in a real-world scenario?",
//         option1: "Sorting a large database of customer information",
//         option2: "Sorting a small list of user names in an application",
//         option3: "Sorting a list of phone numbers in a mobile device",
//         option4: "Sorting a dataset for scientific research",
//         ans: 2,
//     },
//     {
//         question: "Explain the term 'stable sort' in the context of Bubble Sort.",
//         option1: "It rearranges the elements randomly during the sorting process",
//         option2: "It prioritizes sorting elements in descending order",
//         option3: "It ensures that the smallest element is placed at the end of the array",
//         option4: "It preserves the relative order of equal elements in the sorted output",
//         ans: 4,
//     },
//     {
//         question: "In what scenarios would you recommend using Bubble Sort over more advanced sorting algorithms?",
//         option1: "When simplicity is a priority and the list is small",
//         option2: "When the list is already sorted in descending order",
//         option3: "When parallel processing capabilities are essential",
//         option4: "When time complexity is the primary concern",
//         ans: 1,
//     },
// ];
// export const hardData = [
//     {
//         question: "Compare and contrast Bubble Sort with the Quick Sort algorithm, highlighting their strengths and weaknesses.",
//         option1: "Advantages: Bubble Sort is faster; Quick Sort is simpler; Disadvantages: Quick Sort requires more memory",
//         option2: "Advantages: Bubble Sort is simple; Quick Sort is faster for large lists; Disadvantages: Bubble Sort is inefficient for large lists; Quick Sort is more complex",
//         option3: "Advantages: Both are equally efficient; Disadvantages: Both have high time complexity",
//         option4: "Advantages: Quick Sort is faster; Bubble Sort is more memory-efficient; Disadvantages: Quick Sort is more complex",
//         ans: 2,
//     },
//     {
//         question: "Propose an enhancement to the Bubble Sort algorithm to make it adaptable to different data distributions (e.g., nearly sorted lists or lists with duplicate values).",
//         option1: "Implement a variation of Bubble Sort that recognizes nearly sorted lists and optimizes the sorting process",
//         option2: "Introduce a mechanism to handle duplicate values efficiently during the sorting process",
//         option3: "Modify the comparison operation to consider the distribution of values in the list",
//         option4: "Implement a hybrid sorting algorithm that combines Bubble Sort with another algorithm for improved adaptability",
//         ans: 1,
//     },
//     {
//         question: "Discuss the impact of data distribution on the performance of Bubble Sort and propose strategies to mitigate its limitations.",
//         option1: "Data distribution has a minimal impact on Bubble Sort, and no specific strategies are needed to mitigate its limitations.",
//         option2: "Data distribution only impacts the best-case scenario of Bubble Sort, and choosing a different algorithm is not necessary.",
//         option3: "Data distribution significantly affects Bubble Sort's efficiency, and strategies may include pre-sorting or choosing a different algorithm based on the distribution.",
//         option4: "Bubble Sort performs well regardless of data distribution, and no strategies are required.",
//         ans: 3,
//     },
//     {
//         question: "Evaluate the stability of the Bubble Sort algorithm and explain how it ensures stability during the sorting process.",
//         option1: "Bubble Sort is inherently stable, preserving the relative order of equal elements through careful swapping.",
//         option2: "Bubble Sort may not be stable, as it depends on the specific implementation and input data.",
//         option3: "Bubble Sort is only stable when sorting small lists.",
//         option4: "Stability in Bubble Sort is not guaranteed and depends on the input data distribution.",
//         ans: 1,
//     },
//     {
//         question: "Propose modifications to Bubble Sort to make it suitable for parallel processing, and discuss the potential advantages and challenges of parallelizing the algorithm.",
//         option1: "Bubble Sort is inherently parallelizable and does not require modifications; Advantages: Simplicity; Challenges: Limited speedup.",
//         option2: "Implement a parallel version of Bubble Sort using multi-threading; Advantages: Increased efficiency; Challenges: Synchronization issues.",
//         option3: "Parallel processing is not suitable for Bubble Sort, and a different algorithm should be chosen for parallelization; Advantages: None; Challenges: Complexity.",
//         option4: "Introduce parallel processing by dividing the array into subarrays and sorting them concurrently; Advantages: Improved speed; Challenges: Increased complexity.",
//         ans: 4,
//     },
// ];
